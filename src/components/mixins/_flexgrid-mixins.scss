// Flex containers
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
@mixin flexbox {
  display: flex;
}

@mixin flexbox-inline {
  display: inline-flex;
}


// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
@mixin flex-wrap($value: nowrap) {
  flex-wrap: $value;
}


// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
// Default: row
@mixin flex-direction($value: row) {
  flex-direction: $value;
}


// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
// Default: row nowrap
@mixin flex-flow($values: (row nowrap)) {
  flex-flow: $values;
}


// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
@mixin flex-grow($int: 0) {
  flex-grow: $int;
}


// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
@mixin flex-shrink($int: 1) {
  flex-shrink: $int;
}


// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
// Default: auto
@mixin flex-basis($value: auto) {
  flex-basis: $value;
}


// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
@mixin flex($flex-grow: 1, $flex-shrink: null, $flex-basis: null) {

  // Sigh... Let the freaking fallback hell begin...
  // Okay, set a variable to be used by box-flex properties
  $flex-grow-boxflex: $flex-grow;

  // 'box-flex' only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($flex-grow) == 'list' {
    $flex-grow-boxflex: nth($flex-grow, 1);
  }

  flex: $flex-grow $flex-shrink $flex-basis;
}


// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
@mixin flex-align-items($value: stretch) {
  align-items: $value;
}


// Flexbox Align Self
//
// Aligns flex items of the current flex line overriding the align-items value.
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
@mixin flex-align-self($value: auto) {
  align-self: $value;
}


// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
@mixin flex-justify-content($value: flex-start) {
  justify-content: $value;
}


// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
@mixin flex-align-content($value: stretch) {
  align-content: $value;
}


// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
@mixin flex-order($int: 0) {
  order: $int;
}
